<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.mapper.RecommendMapper">
	<!--
	<insert id="insertRecommend" parameterType="com.fa.plus.domain.Recommend">
		INSERT INTO Recommend(num, userId, subject, imageFilename, content, reg_date)
		VALUES (photo_seq.NEXTVAL, #{userId}, #{subject},  
			#{imageFilename}, #{content}, SYSDATE)
	</insert>
	
	<sql id="where-list">
		<if test="schType=='all'">
			( INSTR(subject, #{kwd}) &gt; 0
				OR INSTR(content, #{kwd}) &gt; 0 )
		</if>
		<if test="schType=='subject'">
			INSTR(subject, #{kwd}) &gt; 0
		</if>
		<if test="schType=='content'">
			INSTR(content, #{kwd}) &gt; 0 
		</if>
		<if test="schType=='userName'">
			userName=#{kwd}
		</if>
		<if test="schType=='reg_date'">
			( TO_CHAR(p.reg_date, 'YYYY-MM-DD') = #{kwd}
				OR TO_CHAR(p.reg_date, 'YYYYMMDD') = #{kwd} )
		</if>
	</sql>
	-->	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM post p
		JOIN user1 m ON p.post_reg_id = m.useridx
		<!-- 
		<where>
			<if test="kwd!=null and kwd!='' ">
				<include refid="where-list"/>
			</if>
		</where>
		 -->		
	</select>
	
	<select id="listRecommend" parameterType="map" resultType="com.fa.plus.domain.Recommend">
	    SELECT p.post_num, p.post_reg_id, user_name, post_title, post_hit_count, post_content,
	           TO_CHAR(post_reg_date, 'yyyy-mm-dd') as post_reg_date,
	           NVL(f.post_fileCount, 0) as post_fileCount,
	           NVL(c.replyCount, 0) as replyCount,
	           f.file_name
	    FROM post p
	    JOIN user1 m ON p.post_reg_id = m.useridx
	    LEFT OUTER JOIN (
	        SELECT post_num, COUNT(*) as post_fileCount, MAX(file_num) as file_num,
	         MAX(file_name) KEEP (DENSE_RANK FIRST ORDER BY file_num) as file_name
	        FROM post_file
	        GROUP BY post_num
	    ) f ON p.post_num = f.post_num
	    LEFT OUTER JOIN (
	        SELECT post_num, COUNT(*) as replyCount FROM reply
	        WHERE reply_visible = 1
	        GROUP BY post_num
	    ) c ON p.post_num = c.post_num
	    ORDER BY p.post_num DESC
	    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>


	<!-- 
	<select id="findById" parameterType="Long" resultType="com.sp.app.domain.Photo">
		SELECT num, p.userId, userName, subject, imageFilename, 
			content, reg_date
		FROM photo p
		JOIN member1 m ON p.userId = m.userId
		WHERE num=#{num}
	</select>
	 -->
	 
	<!-- 조회수 증가 --> <!--
	<update id="updateHitCount" parameterType="Long">
		UPDATE bbs SET hitCount=hitCount+1 WHERE num = #{num}
	</update>
	-->
	
	<!-- 이전글 --> <!-- 
	<select id="findByPrev" parameterType="map" resultType="com.sp.app.domain.Photo">
		SELECT num, subject
		FROM photo p
		JOIN member1 m ON p.userId=m.userId
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (num &gt; #{num})
		</where>
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
	</select>
	 -->
	<!-- 다음글 --> <!-- 
	<select id="findByNext" parameterType="map" resultType="com.sp.app.domain.Photo">
		SELECT num, subject
		FROM photo p
		JOIN member1 m ON p.userId=m.userId
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
			AND (num &lt; #{num})
		</where>
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<update id="updatePhoto" parameterType="com.sp.app.domain.Photo">
		UPDATE photo SET subject=#{subject}, imageFilename=#{imageFilename},
			content=#{content}
		WHERE num=#{num}
	</update>
	
	<delete id="deletePhoto" parameterType="Long">
		DELETE FROM photo WHERE num=#{num}
	</delete>
	 -->
</mapper>