<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.admin.mapper.MemberManageMapper">

    <!-- 회원 리스트 -->
	<sql id="where-list">
		<choose>
			<when test="schType=='useridx'">
				INSTR(m1.useridx, #{kwd}) &gt;= 1
			</when>
			<otherwise>
				INSTR(${schType}, #{kwd}) &gt;= 1
			</otherwise>
		</choose>
	</sql>
	
	<!-- 리스트 출력  -->
	<select id="listMember" parameterType="map" resultType="com.fa.plus.admin.domain.MemberManage">
		SELECT m1.useridx, usership, user_name, 
			m1.reg_date, 
			enabled, email, tel, 
			TO_CHAR(birth, 'YYYY-MM-DD') birth,
			u.rank_num, uph_num, update_rank, rank1, base_order_money, sale
		FROM userall m
		JOIN user1 m1 ON m.useridx = m1.useridx
		LEFT OUTER JOIN user2 m2 ON m1.useridx = m2.useridx
		LEFT OUTER JOIN user_rank_history u ON m1.useridx = u.useridx  
		LEFT OUTER JOIN user_rank r ON u.rank_num = r.rank_num
		<where>
			<if test="kwd!=null and kwd!='' ">
				<include refid="where-list"/>
			</if>

		</where> 
		ORDER BY reg_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM userall m
		JOIN user1 m1 ON m.useridx = m1.useridx
		LEFT OUTER JOIN user2 m2 ON m1.useridx = m2.useridx
		<where>
			<if test="kwd!=null and kwd!='' ">
				<include refid="where-list"/>
			</if>
			<if test="enabled!=''">
				AND enabled = #{enabled}
			</if>
			
		</where> 
    </select>

	<select id="findById" parameterType="long" resultType="com.fa.plus.admin.domain.MemberManage">
		SELECT usership, ur.useridx, m1.user_name, m1.user_pwd, m1.enabled,
			m1.reg_date,
			TO_CHAR(birth, 'YYYY-MM-DD') birth, m2.email, m2.tel, 
			m2.zip, m2.addr1, m2.addr2, ur.rank1, ur.rank_num
		FROM userall m
		JOIN user1 m1 ON m.useridx = m1.useridx
		LEFT OUTER JOIN user2 m2 ON m1.useridx = m2.useridx
		LEFT OUTER JOIN (
			SELECT useridx, h.rank_num, rank1
			FROM user_rank_history h
			JOIN user_rank r ON r.rank_num = h.rank_num
			WHERE useridx = #{useridx}
			ORDER BY update_rank DESC
			FETCH FIRST 1 ROWS ONLY
		) ur ON m2.useridx = ur.useridx
		WHERE ur.useridx = #{useridx}
	</select>
	
    <update id="updateMemberEnabled" parameterType="map">
		UPDATE user1 SET enabled=#{enabled} WHERE useridx=#{useridx}
    </update>	
 

	<!-- 회원 상태 입력  -->
	<insert id="insertMemberState" parameterType="com.fa.plus.admin.domain.MemberManage">
		INSERT INTO user_block(state, useridx, is_blocked, blocked_reason, blocked_date, unblocked_date)
		VALUES (user_block_seq.NEXTVAL, #{useridx}, #{is_blocked}, #{blocked_reason}, SYSDATE, SYSDATE)
	</insert>	
	
	<!-- 회원 상태 출력 -->
	<select id="listMemberState" parameterType="long" resultType="com.fa.plus.admin.domain.MemberManage">
		SELECT state, useridx, is_blocked, blocked_reason, blocked_date, unblocked_date
		FROM user_block
		WHERE useridx = #{useridx}
		ORDER BY state DESC
	</select>
	
	<select id="findByState" parameterType="long" resultType="com.fa.plus.admin.domain.MemberManage">
		SELECT state, useridx, is_blocked, blocked_reason, blocked_date, unblocked_date
		FROM user_block
		WHERE useridx = #{useridx}
		ORDER BY state DESC
		FETCH FIRST 1 ROWS ONLY
	</select>	
	
	<!-- 통계 -->
	<select id="listAgeSection" resultType="com.fa.plus.admin.domain.MemberChart">
	<![CDATA[
		WITH memberAge AS (
		    select m2.useridx, TRUNC(MONTHS_BETWEEN(SYSDATE, birth)/12) age
		    from userall m
		    JOIN user1 m1 ON m.useridx = m1.useridx
		    JOIN user2 m2 ON m1.useridx = m2.useridx
		    WHERE m.usership < 50
		)
		SELECT '10대' section, COUNT(*) count FROM memberAge WHERE age>=10 AND age<20
		UNION ALL
		SELECT '20대' section, COUNT(*) count FROM memberAge WHERE age>=20 AND age<30
		UNION ALL
		SELECT '30대' section, COUNT(*) count FROM memberAge WHERE age>=30 AND age<40
		UNION ALL
		SELECT '40대' section, COUNT(*) count FROM memberAge WHERE age>=40 AND age<50
		UNION ALL
		SELECT '50대' section, COUNT(*) count FROM memberAge WHERE age>=50 AND age<60
		UNION ALL
		SELECT '60대' section, COUNT(*) count FROM memberAge WHERE age>=60 AND age<70
		UNION ALL
		SELECT '기타' section, COUNT(*) count FROM memberAge WHERE age<10 AND age>=70
	]]>
	</select>	
	
	<!-- 등급 입력/수정 -->
	<insert id="insertMemberRank" parameterType="map">
		INSERT INTO user_rank_history(uph_num, rank_num,update_rank, useridx)
			VALUES(user_rank_history_seq.NEXTVAL,
				#{rank_num}, SYSDATE, #{useridx})
	</insert>
    
	<select id="listRank" resultType="com.fa.plus.admin.domain.MemberManage">
		SELECT rank_num, rank1, base_order_money, sale
		FROM user_rank
		ORDER BY rank_num DESC
	</select>
    
    
</mapper>