<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.admin.mapper.OrderManageMapper">



<select id="orderCount" parameterType="map" resultType="Integer">
SELECT NVL(COUNT(*), 0)
FROM totalOrder o
LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
LEFT OUTER JOIN order_detail od ON od.order_num = od.order_num
<where>
	<!--  배송 전 주문들 -->
		<if test="state == 1">
			(od.change_num &gt;= 0 AND od.change_num &lt;= 1 
				OR od.change_num &gt;= 3 AND od.change_num &lt;= 7
				OR od.change_num &gt;= 9 AND od.change_num &lt;= 11
				OR od.change_num &gt;= 13 AND od.change_num &lt;= 15 )
		</if>
	<!-- after 배송 주문들 --> 
		<if test="state == 3">
			(od.change_num = 0 
				OR od.change_num = 8
				OR  od.change_num = 12 
				OR od.change_num &gt;= 16 AND od.change_num &lt;= 18
				)
		</if>
	</where>
</select>
 
 
 
<select id="listOrder" parameterType="map" resultType="com.fa.plus.admin.domain.OrderManage">
SELECT o.order_num AS orderNum, o.useridx as memberIdx, NVL(u.user_id,'손님') AS userName, order_total_money AS totalMoney,
		shipping AS deliveryCharge, total_amount AS payment,
		TO_CHAR(order_datetime, 'YYYY-MM-DD HH24:MI') AS orderDate, order_sale AS orderSale, detail_cancel_count AS detailCancelCount, change_num,
		t.tracking_no AS invoiceNumber, delivery_list_num AS deliveryListNum,
		NVL(total_qty, 0) totalQty
FROM totalorder o
	LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
	LEFT OUTER JOIN (
		SELECT order_num, COUNT(*) total_order_count, SUM(od_count) total_qty, 
		COUNT(DECODE(change_num,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0)) detail_cancel_count, 
        NVL(SUM(DECODE(change_num,8,1,12,1,18,1)),0) change_num,
        NVL(SUM(DECODE(change_num,8,1,12,1,16,1,17,1,18,1)),0) delivery_list_num
		FROM order_detail
		GROUP BY order_num
        ) od ON o.order_num = od.order_num
	LEFT OUTER JOIN transports t ON o.order_num = t.order_num
	<where>
	 <!-- 배송 전 주문들 -->
		<if test="state == 1">
			 delivery_list_num &lt; 1
		</if>
	<!-- after 배송 주문들 -->
		<if test="state == 3">
		delivery_list_num &gt; 0  
			
		</if>
	</where>
	ORDER BY o.order_num DESC
</select> 

<select id="findById"  parameterType="String" resultType="com.fa.plus.admin.domain.OrderManage">
SELECT orderNum, memberIdx, userName, orderDate, totalMoney, orderSale, usedSaved, deliveryCharge, payment, NVL(SUM(cancelAmount),0) AS cancelAmount, orderState, orderStateInfo, detailStateInfo, orderStateInfo AS order_status, MAX(orderStateDate) AS orderStateDate,
      deliveryName, invoiceNumber, detailState, trStatus
FROM(
SELECT o.order_num AS orderNum, u.useridx AS memberIdx, NVL(u.user_id, '손님') AS userName, 
	TO_CHAR(order_datetime, 'YYYY-MM-DD HH24:MI:SS') AS orderDate, order_total_money AS totalMoney, order_sale AS orderSale,
	o.order_point AS usedSaved, o.shipping AS deliveryCharge, o.total_amount AS payment, rf.refund_total_amount AS cancelAmount ,  
    od.change_num AS orderState, 
	TO_CHAR(ORDER_STATUS_UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') orderStateDate, cp_name AS deliveryName, tracking_no AS invoiceNumber, 
    NVL(DECODE(od.change_num,999,14 , od.change_num), 14) AS detailState , orderStateInfo AS detailStateInfo ,
    orderStateInfo AS orderStateInfo, t.tr_status AS trStatus	
	FROM totalorder o
	LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
	LEFT OUTER JOIN transports t ON o.order_num = t.order_num
	LEFT OUTER JOIN company cp ON t.cp_num = cp.cp_num
      LEFT OUTER JOIN (
            SELECT od1.order_num,
            CASE
                  WHEN COUNT(DISTINCT od1.change_num) = 1 THEN MAX(od1.change_num)
                 WHEN COUNT(DISTINCT od1.change_num) > 1 AND MAX(od1.change_num) >= 15  THEN 888
                  ELSE 999
            END AS change_num,
            CASE
                  WHEN COUNT(DISTINCT od1.change_num) = 1 THEN MAX(order_status)
                  WHEN COUNT(DISTINCT od1.change_num) > 1 AND MAX(od1.change_num) >= 15  THEN '부분 발송'
                  ELSE '부분 취소'
            END AS orderStateInfo
      FROM order_detail od1
      JOIN totalOrder o2 ON od1.order_num = o2.order_num
      LEFT JOIN order_status os ON od1.change_num = os.change_num
      GROUP BY od1.order_num
      ) od ON o.order_num = od.order_num
      LEFT OUTER JOIN (
            SELECT od_num, order_num, order_status_update_date
            FROM order_detail
      ) od2 ON o.order_num = od2.order_num
      LEFT OUTER JOIN order_status os ON od.change_num = os.change_num
      LEFT OUTER JOIN( 
            SELECT f2.od_num, NVL(SUM(f2.refund_total_amount),0) AS refund_total_amount
            FROM refund f2
            JOIN order_detail od2 ON f2.od_num = od2.od_num
            JOIN totalOrder o2 ON od2.order_num = o2.order_num
            GROUP BY f2.od_num
      ) rf ON od2.od_num = rf.od_num
WHERE od.order_num = #{order_num}
)
GROUP BY orderNum, memberIdx, userName, orderDate, totalMoney, orderSale, usedSaved, deliveryCharge, payment, orderState, orderStateInfo, detailStateInfo, deliveryName, invoiceNumber, detailState, trStatus



	
	<!-- 
	SELECT o.order_num AS orderNum, u.useridx AS memberIdx, NVL(u.user_id, '손님') AS userName, 
	TO_CHAR(order_datetime, 'YYYY-MM-DD HH24:MI:SS') AS orderDate, order_total_money AS totalMoney, order_sale AS orderSale,
	o.order_point AS usedSaved, o.shipping AS deliveryCharge, o.total_amount AS payment, refund_total_amount AS cancelAmount ,  od.change_num AS orderState, order_status,
	TO_CHAR(ORDER_STATUS_UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') orderStateDate, cp_name AS deliveryName, tracking_no AS invoiceNumber, 
	payMethod, card_name AS cardName, auth_number AS authNumber, auth_date AS authDate, order_status AS orderStateInfo, t.tr_status AS trStatus	
	FROM totalorder o
	LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
	LEFT OUTER JOIN card c ON o.order_num = c.order_num
	LEFT OUTER JOIN transports t ON o.order_num = t.order_num
	LEFT OUTER JOIN company cp ON t.cp_num = cp.cp_num
    LEFT OUTER JOIN order_detail od ON o.order_num = od.order_num
    LEFT OUTER JOIN order_status os ON od.change_num = os.change_num
    LEFT OUTER JOIN refund rf ON od.od_num = rf.od_num
	WHERE o.order_num = #{order_num}
	 -->
</select>


<select id="findByOrderDetails" parameterType="String" resultType="com.fa.plus.admin.domain.OrderDetailManage">

SELECT od.order_num AS orderNum, od.od_num AS orderDetailNum,
	od_count AS qty, od.od_price AS price, order_earn AS savedMoney, od_total_amount AS totalAmount, 
	op.detail_num AS detailNum, op.option_value AS optionValue, NVL(od.detail_num2,null) AS detailNum2, NVL(op2.option_value, null) AS optionValue2,
	od.product_num AS productNum, product_name AS productName, od.change_num AS detailState, refund_total_amount AS cancelAmount, order_status AS detailStateInfo
FROM order_detail od
JOIN product p ON od.product_num = p.product_num
JOIN optionDetail op ON od.detail_num1 = op.detail_num
LEFT OUTER JOIN optionDetail op2 ON od.detail_num2 = op2.detail_num
JOIN totalOrder o ON od.order_num = o.order_num
LEFT OUTER JOIN refund rf ON od.od_num = rf.od_num
JOIN order_status os ON od.change_num = os.change_num
WHERE od.order_num = #{order_num}
 

 
</select>

<select id="orderDetailCount" parameterType="map" resultType="Integer">
SELECT NVL(COUNT(*), 0)
FROM totalorder o
LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
JOIN order_detail od ON o.order_num = od.order_num
</select>

<select id="listOrderDetail" parameterType = "map" resultType="com.fa.plus.admin.domain.OrderDetailManage">
	SELECT o.order_num AS orderNum, o.useridx AS memberidx, NVL(user_name,'손님') AS userName,
		order_datetime AS orderDate, order_total_money AS totalMoney, order_earn AS savedMoney,
		order_point AS userSaved, shipping AS deliveryCharge, total_amount AS payment, od_count AS qty, NVL((0.01 * rk.sale) * od_total_amount,0) AS salePrice, 
		od.od_num AS orderDetailNum, od.product_num AS productNum, product_name AS productName,
            op.detail_num AS detailNum, op.option_value AS optionValue, od.detail_num2 AS detailNum2, op2.option_value AS optionValue2
            , os.change_num AS detailState, cp_name, tracking_no

	FROM totalorder o
	LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
	JOIN order_detail od ON o.order_num = od.order_num
	JOIN (
        SELECT USERIDX,
        UPH_NUM
     , RANK_NUM
     , UPDATE_RANK
  FROM (
         SELECT UPH_NUM
     , RANK_NUM
     , UPDATE_RANK
     , USERIDX
              , ROW_NUMBER() OVER(PARTITION BY useridx ORDER BY UPDATE_RANK DESC) AS rn
           FROM user_rank_history
       )
 WHERE rn = 1
    ) ht ON o.useridx = ht.useridx
	JOIN user_rank rk ON ht.rank_num = rk.rank_num
	JOIN product p ON od.product_num = p.product_num
	JOIN optionDetail op ON od.detail_num1 = op.detail_num
	LEFT OUTER JOIN optionDetail op2 ON od.detail_num2 = op2.detail_num
      JOIN order_status os ON od.change_num = os.change_num
	LEFT OUTER JOIN transports t ON o.order_num = t.order_num
	LEFT OUTER JOIN company cp ON t.cp_num = cp.cp_num
</select>

<update id="updateOrderState" parameterType="map">
	UPDATE transports SET tr_status = #{orderState}
	WHERE order_num = #{orderNum}
</update>

<update id="updateOrderState2" parameterType="map">
	UPDATE order_detail SET change_num = 
	<choose>
		<when test="orderState==0">
			3
		</when>
		<when test="orderState==1">
			16
		</when>
		<when test="orderState==2">
			17
		</when>
		<when test="orderState==3">
			18
		</when>	
		<otherwise>
			15
		</otherwise>	
	</choose>	
	, order_status_update_date = SYSDATE,
	order_status_update_useridx = 1
	WHERE order_num = #{orderNum} AND change_num &lt; 3 OR change_num &gt;13 
</update>

<select id="findByTotalCancelAmount" parameterType="String" resultType="Integer">
	SELECT NVL(SUM(productMoney), 0) totalCancelAmount
	FROM (
		SELECT ((0.01 * rk.sale) * od_total_amount) * od_count AS productMoney
		FROM order_detail od
		JOIN totalorder o ON od.order_num = o.order_num 
		JOIN user_rank_history ht ON o.useridx = ht.useridx
		JOIN user_rank rk ON ht.rank_num = rk.rank_num
		WHERE od.order_num = #{orderNum} AND (change_num != 3 AND change_num != 5 AND change_num != 12)
	)
</select>

<select id="totalOrderCount" parameterType="String" resultType="Integer">
SELECT NVL(COUNT(*), 0) orderCount
FROM order_detail
WHERE order_num = #{orderNum} AND (change_num != 3 AND change_num != 5 AND change_num != 12)
</select>


<!-- 주문취소는 수정 필요  -->
<insert id="updateCancelOrder1" parameterType="map">
INSERT INTO refund(OD_NUM,REFUND_REASON,REFUND_STATUS,
	REFUND_TOTAL_AMOUNT, REFUND_MEMO, REFUND_APPLICATION_DATE)
VALUES(#{orderDetailNum}, #{refundReason}, #{change_num}, #{totalAmount},'취소 메모', SYSDATE)	
</insert>

<update id="updateCancelOrder2" parameterType="map">
UPDATE order_detail SET change_num = 3
WHERE order_num = #{orderNum}
</update>

<insert id="updateCancelDetail1" parameterType="map">
INSERT INTO refund(OD_NUM,REFUND_REASON,REFUND_STATUS,
	REFUND_TOTAL_AMOUNT, REFUND_MEMO, REFUND_APPLICATION_DATE, REFUND_SUCCESS_DATE)
VALUES(#{orderDetailNum}, #{refundReason}, #{refundState}, #{cancelAmount},'취소 메모', SYSDATE,SYSDATE)	
</insert>

<update id="updateCancelDetail2" parameterType="map">
UPDATE order_detail SET change_num = #{detailState}
WHERE od_num = #{orderDetailNum}
</update>

<insert id="updateCancelAmount1" parameterType="map">
INSERT INTO refund(OD_NUM,REFUND_REASON,REFUND_STATUS,
	REFUND_TOTAL_AMOUNT, REFUND_MEMO, REFUND_APPLICATION_DATE, REFUND_SUCCESS_DATE)
VALUES(#{orderDetailNum}, #{refundReason}, #{change_num}, #{totalAmount},'취소 메모', SYSDATE, SYSDATE)	
</insert>

<update id="updateCancelAmount2" parameterType="map">
UPDATE order_detail SET change_num = 3
WHERE order_num = #{orderNum}
</update>

<!-- orderState, deliveryName <-> cp_name 적용 필요 -->
<insert id="updateOrderInvoiceNumber1" parameterType="map">
	UPDATE transports SET cp_num = #{cpNum} , tracking_no = #{invoiceNumber}, 
		reception_datatime = SYSDATE, tr_status = #{trStatus}
	WHERE order_num = #{orderNum}
</insert>

<update id="updateOrderInvoiceNumber2" parameterType="map">
	UPDATE order_detail SET change_num = 17, order_status_update_date = SYSDATE,
		order_status_update_useridx = 1
	WHERE order_num = #{orderNum} AND ( change_num &lt; 3 OR change_num &gt; 14)
</update>

<update id="updateOrderDetailState" parameterType="map">
	UPDATE order_detail SET change_num = #{detailState}, ORDER_STATUS_UPDATE_DATE = SYSDATE
	WHERE od_num = #{orderDetailNum}
</update>

<select id="listDeliveryCompany" resultType="map">
SELECT cp_num AS num, cp_name AS deliveryName, cp_tel AS tel, cp_email AS email
FROM company
</select>

<insert id="insertDetailStateInfo" parameterType="map">
<!-- 에러나면 조치 필요  -->
</insert>

<select id="listDetailStateInfo" parameterType="long" resultType="map">
SELECT od.change_num AS stateNum, od.od_num AS orderDetailNum, o.useridx AS memberidx, NVL(user_name,'손님') AS userName,
		od.change_num AS detailState, order_status AS detailStateInfo, TO_CHAR(order_status_update_date, 'YYYYMMDD HH24:MI') AS detailStateDate,
		order_status AS STATEMEMO, NVL(refund_total_amount,0) AS cancelAmount
	FROM order_detail od
	JOIN totalOrder o ON od.order_num = o.order_num 
	LEFT OUTER JOIN user1 u ON o.useridx = u.useridx
	JOIN order_status os ON od.change_num = os.change_num
	LEFT OUTER JOIN refund f ON od.od_num = f.od_num
	WHERE od.od_num = #{orderDetailNum}
	ORDER BY od.change_num DESC 
</select>


<!--배송완료 5일후 자동 구매 확정  -->
<select id="listExpiredPeriodOrder" resultType="Long">
	SELECT od_num AS orderDetailNum
	FROM totalOrder o
	JOIN order_detail od ON o.order_num = od.order_num
	LEFT OUTER JOIN transports t ON o.order_num = t.order_num
	WHERE  ( od.change_num = 5 OR t.tr_status = 3) AND TRUNC(SYSDATE - order_dateTime) &gt; = 5  
</select>

<update id="updateAutoPurchaseconfirmation" parameterType="Long">
	UPDATE order_detail SET change_num = 2
	WHERE od_num = #{orderDetailNum}
</update>

<update id="updateAutoPurchaseconfirmation2">
		UPDATE order_detail SET change_num = 2
		WHERE od_num IN (
			SELECT od_num AS orderDetailNum
	FROM totalOrder o
	JOIN order_detail od ON o.order_num = od.order_num
	LEFT OUTER JOIN transports t ON o.order_num = t.order_num
	WHERE  ( od.change_num = 5 OR t.tr_status = 3) AND TRUNC(SYSDATE - order_dateTime) &gt; = 5  
		)
</update>














</mapper>